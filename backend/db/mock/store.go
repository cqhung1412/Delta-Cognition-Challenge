// Code generated by MockGen. DO NOT EDIT.
// Source: dog-recommend/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	sqlc "dog-recommend/db/sqlc"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateDog mocks base method
func (m *MockStore) CreateDog(arg0 context.Context, arg1 sqlc.CreateDogParams) (sqlc.Dog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDog", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Dog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDog indicates an expected call of CreateDog
func (mr *MockStoreMockRecorder) CreateDog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDog", reflect.TypeOf((*MockStore)(nil).CreateDog), arg0, arg1)
}

// CreateUser mocks base method
func (m *MockStore) CreateUser(arg0 context.Context, arg1 sqlc.CreateUserParams) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteFavorite mocks base method
func (m *MockStore) DeleteFavorite(arg0 context.Context, arg1 sqlc.DeleteFavoriteParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFavorite", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFavorite indicates an expected call of DeleteFavorite
func (mr *MockStoreMockRecorder) DeleteFavorite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFavorite", reflect.TypeOf((*MockStore)(nil).DeleteFavorite), arg0, arg1)
}

// GetDog mocks base method
func (m *MockStore) GetDog(arg0 context.Context, arg1 int64) (sqlc.Dog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDog", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Dog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDog indicates an expected call of GetDog
func (mr *MockStoreMockRecorder) GetDog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDog", reflect.TypeOf((*MockStore)(nil).GetDog), arg0, arg1)
}

// GetFavoritesByDog mocks base method
func (m *MockStore) GetFavoritesByDog(arg0 context.Context, arg1 int64) ([]sqlc.Favorite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavoritesByDog", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Favorite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavoritesByDog indicates an expected call of GetFavoritesByDog
func (mr *MockStoreMockRecorder) GetFavoritesByDog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavoritesByDog", reflect.TypeOf((*MockStore)(nil).GetFavoritesByDog), arg0, arg1)
}

// GetFavoritesByUser mocks base method
func (m *MockStore) GetFavoritesByUser(arg0 context.Context, arg1 int64) ([]sqlc.Favorite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavoritesByUser", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Favorite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavoritesByUser indicates an expected call of GetFavoritesByUser
func (mr *MockStoreMockRecorder) GetFavoritesByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavoritesByUser", reflect.TypeOf((*MockStore)(nil).GetFavoritesByUser), arg0, arg1)
}

// GetOwnedDogs mocks base method
func (m *MockStore) GetOwnedDogs(arg0 context.Context, arg1 sqlc.GetOwnedDogsParams) ([]sqlc.Dog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnedDogs", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Dog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnedDogs indicates an expected call of GetOwnedDogs
func (mr *MockStoreMockRecorder) GetOwnedDogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnedDogs", reflect.TypeOf((*MockStore)(nil).GetOwnedDogs), arg0, arg1)
}

// GetSimilarDogs mocks base method
func (m *MockStore) GetSimilarDogs(arg0 context.Context, arg1 sqlc.GetSimilarDogsParams) ([]sqlc.GetSimilarDogsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSimilarDogs", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.GetSimilarDogsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSimilarDogs indicates an expected call of GetSimilarDogs
func (mr *MockStoreMockRecorder) GetSimilarDogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSimilarDogs", reflect.TypeOf((*MockStore)(nil).GetSimilarDogs), arg0, arg1)
}

// GetUser mocks base method
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// UpdateDogLabels mocks base method
func (m *MockStore) UpdateDogLabels(arg0 context.Context, arg1 sqlc.UpdateDogLabelsParams) (sqlc.Dog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDogLabels", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Dog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDogLabels indicates an expected call of UpdateDogLabels
func (mr *MockStoreMockRecorder) UpdateDogLabels(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDogLabels", reflect.TypeOf((*MockStore)(nil).UpdateDogLabels), arg0, arg1)
}
