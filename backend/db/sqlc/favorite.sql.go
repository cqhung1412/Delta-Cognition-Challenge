// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: favorite.sql

package db

import (
	"context"
)

const deleteFavorite = `-- name: DeleteFavorite :exec
DELETE FROM favorite
WHERE user_id = $1 AND dog_id = $2
`

type DeleteFavoriteParams struct {
	UserID int64 `json:"user_id"`
	DogID  int64 `json:"dog_id"`
}

func (q *Queries) DeleteFavorite(ctx context.Context, arg DeleteFavoriteParams) error {
	_, err := q.db.ExecContext(ctx, deleteFavorite, arg.UserID, arg.DogID)
	return err
}

const getFavoritesByDog = `-- name: GetFavoritesByDog :many
SELECT user_id, dog_id, created_at
FROM favorite
WHERE dog_id = $1
`

func (q *Queries) GetFavoritesByDog(ctx context.Context, dogID int64) ([]Favorite, error) {
	rows, err := q.db.QueryContext(ctx, getFavoritesByDog, dogID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Favorite{}
	for rows.Next() {
		var i Favorite
		if err := rows.Scan(&i.UserID, &i.DogID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFavoritesByUser = `-- name: GetFavoritesByUser :many
SELECT user_id, dog_id, created_at
FROM favorite
WHERE user_id = $1
`

func (q *Queries) GetFavoritesByUser(ctx context.Context, userID int64) ([]Favorite, error) {
	rows, err := q.db.QueryContext(ctx, getFavoritesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Favorite{}
	for rows.Next() {
		var i Favorite
		if err := rows.Scan(&i.UserID, &i.DogID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
