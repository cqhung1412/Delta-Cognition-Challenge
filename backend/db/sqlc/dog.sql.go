// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: dog.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createDog = `-- name: CreateDog :one
INSERT INTO dogs 
  (
    owner_id,
    image,
    name,
    breed,
    birth_year,
    message
  )
VALUES 
  ($1, $2, $3, $4, $5, $6) 
RETURNING id, owner_id, image, name, breed, birth_year, message, labels, created_at
`

type CreateDogParams struct {
	OwnerID   sql.NullInt64  `json:"owner_id"`
	Image     []byte         `json:"image"`
	Name      string         `json:"name"`
	Breed     string         `json:"breed"`
	BirthYear int32          `json:"birth_year"`
	Message   sql.NullString `json:"message"`
}

func (q *Queries) CreateDog(ctx context.Context, arg CreateDogParams) (Dog, error) {
	row := q.db.QueryRowContext(ctx, createDog,
		arg.OwnerID,
		arg.Image,
		arg.Name,
		arg.Breed,
		arg.BirthYear,
		arg.Message,
	)
	var i Dog
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Image,
		&i.Name,
		&i.Breed,
		&i.BirthYear,
		&i.Message,
		pq.Array(&i.Labels),
		&i.CreatedAt,
	)
	return i, err
}

const getDog = `-- name: GetDog :one
SELECT id, owner_id, image, name, breed, birth_year, message, labels, created_at
FROM dogs
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetDog(ctx context.Context, id int64) (Dog, error) {
	row := q.db.QueryRowContext(ctx, getDog, id)
	var i Dog
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Image,
		&i.Name,
		&i.Breed,
		&i.BirthYear,
		&i.Message,
		pq.Array(&i.Labels),
		&i.CreatedAt,
	)
	return i, err
}

const getOwnedDogs = `-- name: GetOwnedDogs :many
SELECT id, owner_id, image, name, breed, birth_year, message, labels, created_at
FROM dogs
WHERE owner_id = $1
LIMIT $1
OFFSET $2
`

type GetOwnedDogsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetOwnedDogs(ctx context.Context, arg GetOwnedDogsParams) ([]Dog, error) {
	rows, err := q.db.QueryContext(ctx, getOwnedDogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Dog{}
	for rows.Next() {
		var i Dog
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Image,
			&i.Name,
			&i.Breed,
			&i.BirthYear,
			&i.Message,
			pq.Array(&i.Labels),
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSimilarDogs = `-- name: GetSimilarDogs :many
SELECT
  id,
  image,
  name,
  birth_year,
  breed,
  message,
  labels
FROM dogs
WHERE
  (
    labels && (
      SELECT labels
      FROM dogs
      WHERE dogs.id = $1
    )
    OR breed = (
      SELECT breed
      FROM dogs
      WHERE dogs.id = $1
    )
  )
ORDER BY
  CASE
    WHEN labels && (
      SELECT labels
      FROM dogs
      WHERE dogs.id = $1
    ) THEN 1
    ELSE 2
  END,
  similarity DESC
LIMIT $2
OFFSET $3
`

type GetSimilarDogsParams struct {
	ID     int64 `json:"id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetSimilarDogsRow struct {
	ID        int64          `json:"id"`
	Image     []byte         `json:"image"`
	Name      string         `json:"name"`
	BirthYear int32          `json:"birth_year"`
	Breed     string         `json:"breed"`
	Message   sql.NullString `json:"message"`
	Labels    []string       `json:"labels"`
}

func (q *Queries) GetSimilarDogs(ctx context.Context, arg GetSimilarDogsParams) ([]GetSimilarDogsRow, error) {
	rows, err := q.db.QueryContext(ctx, getSimilarDogs, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSimilarDogsRow{}
	for rows.Next() {
		var i GetSimilarDogsRow
		if err := rows.Scan(
			&i.ID,
			&i.Image,
			&i.Name,
			&i.BirthYear,
			&i.Breed,
			&i.Message,
			pq.Array(&i.Labels),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDogLabels = `-- name: UpdateDogLabels :one
UPDATE dogs
SET labels = $1
WHERE id = $2
RETURNING id, owner_id, image, name, breed, birth_year, message, labels, created_at
`

type UpdateDogLabelsParams struct {
	Labels []string `json:"labels"`
	ID     int64    `json:"id"`
}

func (q *Queries) UpdateDogLabels(ctx context.Context, arg UpdateDogLabelsParams) (Dog, error) {
	row := q.db.QueryRowContext(ctx, updateDogLabels, pq.Array(arg.Labels), arg.ID)
	var i Dog
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Image,
		&i.Name,
		&i.Breed,
		&i.BirthYear,
		&i.Message,
		pq.Array(&i.Labels),
		&i.CreatedAt,
	)
	return i, err
}
